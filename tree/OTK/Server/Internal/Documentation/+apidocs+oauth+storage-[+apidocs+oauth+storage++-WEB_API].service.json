{
  "goid": "f2b26bfeaabb0821a8089e005445417a",
  "guid": "6b4da034-a791-4945-9a69-f531ea05dd5f",
  "name": "/apidocs/oauth/storage",
  "resolutionPath": "/apidocs/oauth/storage/*",
  "serviceType": "WEB_API",
  "checksum": "42e84522318b30ae0f28a7c4504abba011796cca",
  "enabled": true,
  "folderPath": "/OTK/Server/Internal/Documentation",
  "methodsAllowed": [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "HEAD",
    "OPTIONS",
    "OTHER"
  ],
  "tracingEnabled": false,
  "wssProcessingEnabled": false,
  "laxResolution": false,
  "policy": {
    "xml": "<wsp:Policy xmlns:L7p=\"http://www.layer7tech.com/ws/policy\" xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2002/12/policy\">\n    <wsp:All wsp:Usage=\"Required\">\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"============================================\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"=== *** THIS POLICY IS OVERWRITTEN DURING AN UPGRADE ***\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"=== Be aware that custom configuration made in this policy is overwritten during a solution kit upgrade.\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"=== However, the older version of the policy is kept in the history and can be referenced.\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"=== After upgrade, manually merge customizations from the old version of the policy to the new version.\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"============================================\"/>\n        </L7p:CommentAssertion>\n        <L7p:CommentAssertion>\n            <L7p:Comment stringValue=\"This API returns API documentation in the requested format.\"/>\n        </L7p:CommentAssertion>\n        <L7p:CustomizeErrorResponse>\n            <L7p:Content stringValue=\"${error.msg}\"/>\n            <L7p:ContentType stringValue=\"${content-type}\"/>\n            <L7p:ExtraHeaders nameValuePairArray=\"included\">\n                <L7p:item nameValuePair=\"included\">\n                    <L7p:Key stringValue=\"Pragma\"/>\n                    <L7p:Value stringValue=\"no-cache\"/>\n                </L7p:item>\n                <L7p:item nameValuePair=\"included\">\n                    <L7p:Key stringValue=\"Cache-Control\"/>\n                    <L7p:Value stringValue=\"no-store\"/>\n                </L7p:item>\n            </L7p:ExtraHeaders>\n            <L7p:HttpStatus stringValue=\"${status}\"/>\n        </L7p:CustomizeErrorResponse>\n        <L7p:Encapsulated>\n            <L7p:AssertionComment assertionComment=\"included\">\n                <L7p:Properties mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                        <L7p:value stringValue=\"GET|OPTIONS\"/>\n                    </L7p:entry>\n                    <L7p:entry>\n                        <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                        <L7p:value stringValue=\"// OPTIONS to enable CORS\"/>\n                    </L7p:entry>\n                </L7p:Properties>\n            </L7p:AssertionComment>\n            <L7p:EncapsulatedAssertionConfigGuid stringValue=\"b8822449-71ff-455b-8f10-39122e6c549b\"/>\n            <L7p:EncapsulatedAssertionConfigName stringValue=\"OTK HTTP Method Validation\"/>\n            <L7p:Parameters mapValue=\"included\">\n                <L7p:entry>\n                    <L7p:key stringValue=\"method\"/>\n                    <L7p:value stringValue=\"GET|OPTIONS\"/>\n                </L7p:entry>\n            </L7p:Parameters>\n        </L7p:Encapsulated>\n        <wsp:All wsp:Usage=\"Required\">\n            <L7p:SetVariable>\n                <L7p:Base64Expression stringValue=\"NDAw\"/>\n                <L7p:VariableToSet stringValue=\"status\"/>\n            </L7p:SetVariable>\n            <L7p:SetVariable>\n                <L7p:Base64Expression stringValue=\"MDAw\"/>\n                <L7p:VariableToSet stringValue=\"error.code\"/>\n            </L7p:SetVariable>\n            <L7p:SetVariable>\n                <L7p:Base64Expression stringValue=\"eyAiZXJyb3IiOiJpbnZhbGlkX3JlcXVlc3QiLCAiZXJyb3JfZGVzY3JpcHRpb24iOiJUaGUgcmVxdWVzdCBmYWlsZWQgZHVlIHRvIGFuIHVua25vd24gcmVhc29uIiB9\"/>\n                <L7p:VariableToSet stringValue=\"error.msg\"/>\n            </L7p:SetVariable>\n            <L7p:SetVariable>\n                <L7p:Base64Expression stringValue=\"YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04\"/>\n                <L7p:VariableToSet stringValue=\"content-type\"/>\n            </L7p:SetVariable>\n            <L7p:assertionComment>\n                <L7p:Properties mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                        <L7p:value stringValue=\"Initialize\"/>\n                    </L7p:entry>\n                </L7p:Properties>\n            </L7p:assertionComment>\n        </wsp:All>\n        <L7p:CustomizeErrorResponse>\n            <L7p:Content stringValue=\"${error.msg}\"/>\n            <L7p:ContentType stringValue=\"${content-type}\"/>\n            <L7p:ExtraHeaders nameValuePairArray=\"included\">\n                <L7p:item nameValuePair=\"included\">\n                    <L7p:Key stringValue=\"Pragma\"/>\n                    <L7p:Value stringValue=\"no-cache\"/>\n                </L7p:item>\n                <L7p:item nameValuePair=\"included\">\n                    <L7p:Key stringValue=\"Cache-Control\"/>\n                    <L7p:Value stringValue=\"no-store\"/>\n                </L7p:item>\n                <L7p:item nameValuePair=\"included\">\n                    <L7p:Key stringValue=\"x-ca-err\"/>\n                    <L7p:Value stringValue=\"${error.code}\"/>\n                </L7p:item>\n            </L7p:ExtraHeaders>\n            <L7p:HttpStatus stringValue=\"${status}\"/>\n        </L7p:CustomizeErrorResponse>\n        <L7p:Encapsulated>\n            <L7p:EncapsulatedAssertionConfigGuid stringValue=\"47f768f4-b478-472b-a1ee-10f4b6e76f99\"/>\n            <L7p:EncapsulatedAssertionConfigName stringValue=\"OTK Require SSL (with Client Certificate)\"/>\n            <L7p:Parameters mapValue=\"included\">\n                <L7p:entry>\n                    <L7p:key stringValue=\"apiPrefix\"/>\n                    <L7p:value stringValue=\"\"/>\n                </L7p:entry>\n                <L7p:entry>\n                    <L7p:key stringValue=\"requireClientCert\"/>\n                    <L7p:value stringValue=\"false\"/>\n                </L7p:entry>\n            </L7p:Parameters>\n        </L7p:Encapsulated>\n        <L7p:Include>\n            <L7p:PolicyGuid stringValue=\"9f29a8bd-912e-40a5-a48c-3b6f8aa40ac6\"/>\n        </L7p:Include>\n        <wsp:OneOrMore wsp:Usage=\"Required\">\n            <L7p:Encapsulated>\n                <L7p:AssertionComment assertionComment=\"included\">\n                    <L7p:Properties mapValue=\"included\">\n                        <L7p:entry>\n                            <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                            <L7p:value stringValue=\"// optional\"/>\n                        </L7p:entry>\n                    </L7p:Properties>\n                </L7p:AssertionComment>\n                <L7p:EncapsulatedAssertionConfigGuid stringValue=\"bac17a37-0b06-47fd-910c-4faced9489c3\"/>\n                <L7p:EncapsulatedAssertionConfigName stringValue=\"OTK CORS\"/>\n                <L7p:Parameters mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"custom\"/>\n                        <L7p:value stringValue=\"{&quot;url_path_query&quot;:&quot;${request.url.path}${request.url.query}&quot;, &quot;http_method_allowed&quot;: &quot;${http_method_allowed}&quot;}\"/>\n                    </L7p:entry>\n                    <L7p:entry>\n                        <L7p:key stringValue=\"requireCORS\"/>\n                        <L7p:value stringValue=\"optional\"/>\n                    </L7p:entry>\n                </L7p:Parameters>\n            </L7p:Encapsulated>\n            <L7p:Encapsulated>\n                <L7p:AssertionComment assertionComment=\"included\">\n                    <L7p:Properties mapValue=\"included\">\n                        <L7p:entry>\n                            <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                            <L7p:value stringValue=\"error\"/>\n                        </L7p:entry>\n                        <L7p:entry>\n                            <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                            <L7p:value stringValue=\"// error code produced in previous assertion\"/>\n                        </L7p:entry>\n                    </L7p:Properties>\n                </L7p:AssertionComment>\n                <L7p:EncapsulatedAssertionConfigGuid stringValue=\"56bd8147-3ab4-4d09-9460-8b2de02b7a9e\"/>\n                <L7p:EncapsulatedAssertionConfigName stringValue=\"OTK Fail with error message\"/>\n                <L7p:Parameters mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"apiPrefix\"/>\n                        <L7p:value stringValue=\"\"/>\n                    </L7p:entry>\n                    <L7p:entry>\n                        <L7p:key stringValue=\"givenErrorCode\"/>\n                        <L7p:value stringValue=\"${error.code}\"/>\n                    </L7p:entry>\n                </L7p:Parameters>\n            </L7p:Encapsulated>\n            <L7p:assertionComment>\n                <L7p:Properties mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                        <L7p:value stringValue=\"CORS\"/>\n                    </L7p:entry>\n                    <L7p:entry>\n                        <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                        <L7p:value stringValue=\"// Check for CORS\"/>\n                    </L7p:entry>\n                </L7p:Properties>\n            </L7p:assertionComment>\n        </wsp:OneOrMore>\n        <wsp:OneOrMore wsp:Usage=\"Required\">\n            <wsp:All wsp:Usage=\"Required\">\n                <L7p:ComparisonAssertion>\n                    <L7p:CaseSensitive booleanValue=\"false\"/>\n                    <L7p:Expression1 stringValue=\"${isPreflight}\"/>\n                    <L7p:MultivaluedComparison multivaluedComparison=\"FIRST\"/>\n                    <L7p:Operator operatorNull=\"null\"/>\n                    <L7p:Predicates predicates=\"included\">\n                        <L7p:item dataType=\"included\">\n                            <L7p:Type variableDataType=\"boolean\"/>\n                        </L7p:item>\n                        <L7p:item binary=\"included\">\n                            <L7p:CaseSensitive booleanValue=\"false\"/>\n                            <L7p:RightValue stringValue=\"false\"/>\n                        </L7p:item>\n                    </L7p:Predicates>\n                </L7p:ComparisonAssertion>\n                <L7p:SetVariable>\n                    <L7p:Base64Expression stringValue=\"JHtyZXF1ZXN0LnVybC5wYXRofQ==\"/>\n                    <L7p:VariableToSet stringValue=\"path\"/>\n                </L7p:SetVariable>\n                <wsp:OneOrMore wsp:Usage=\"Required\">\n                    <wsp:All wsp:Usage=\"Required\">\n                        <L7p:Regex>\n                            <L7p:AutoTarget booleanValue=\"false\"/>\n                            <L7p:OtherTargetMessageVariable stringValue=\"path\"/>\n                            <L7p:Regex stringValue=\"/swagger$\"/>\n                            <L7p:Replacement stringValue=\"\"/>\n                            <L7p:Target target=\"OTHER\"/>\n                        </L7p:Regex>\n                        <L7p:HardcodedResponse>\n                            <L7p:AssertionComment assertionComment=\"included\">\n                                <L7p:Properties mapValue=\"included\">\n                                    <L7p:entry>\n                                    <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                    <L7p:value stringValue=\"200\"/>\n                                    </L7p:entry>\n                                </L7p:Properties>\n                            </L7p:AssertionComment>\n                            <L7p:Base64ResponseBody stringValue=\"\"/>\n                            <L7p:ResponseContentType stringValue=\"application/json; charset=UTF-8\"/>\n                        </L7p:HardcodedResponse>\n                        <L7p:assertionComment>\n                            <L7p:Properties mapValue=\"included\">\n                                <L7p:entry>\n                                    <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                    <L7p:value stringValue=\"swagger\"/>\n                                </L7p:entry>\n                                <L7p:entry>\n                                    <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                                    <L7p:value stringValue=\"// check if this is a request for the swagger document.\"/>\n                                </L7p:entry>\n                            </L7p:Properties>\n                        </L7p:assertionComment>\n                    </wsp:All>\n                    <wsp:All wsp:Usage=\"Required\">\n                        <L7p:SetVariable>\n                            <L7p:Base64Expression stringValue=\"eyJlcnJvciI6ImludmFsaWRfcmVxdWVzdCIsImVycm9yX2Rlc2NyaXB0aW9uIjoiVGhlIHJlcXVlc3RlZCByZXNvdXJjZSBpcyBub3QgYXZhaWxhYmxlIn0=\"/>\n                            <L7p:VariableToSet stringValue=\"error.msg\"/>\n                        </L7p:SetVariable>\n                        <L7p:FalseAssertion/>\n                        <L7p:assertionComment>\n                            <L7p:Properties mapValue=\"included\">\n                                <L7p:entry>\n                                    <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                    <L7p:value stringValue=\"error\"/>\n                                </L7p:entry>\n                            </L7p:Properties>\n                        </L7p:assertionComment>\n                    </wsp:All>\n                    <L7p:assertionComment>\n                        <L7p:Properties mapValue=\"included\">\n                            <L7p:entry>\n                                <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                <L7p:value stringValue=\"response\"/>\n                            </L7p:entry>\n                        </L7p:Properties>\n                    </L7p:assertionComment>\n                </wsp:OneOrMore>\n                <L7p:assertionComment>\n                    <L7p:Properties mapValue=\"included\">\n                        <L7p:entry>\n                            <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                            <L7p:value stringValue=\"Request\"/>\n                        </L7p:entry>\n                    </L7p:Properties>\n                </L7p:assertionComment>\n            </wsp:All>\n            <wsp:All wsp:Usage=\"Required\">\n                <L7p:ComparisonAssertion>\n                    <L7p:CaseSensitive booleanValue=\"false\"/>\n                    <L7p:Expression1 stringValue=\"${isPreflight}\"/>\n                    <L7p:MultivaluedComparison multivaluedComparison=\"FIRST\"/>\n                    <L7p:Operator operatorNull=\"null\"/>\n                    <L7p:Predicates predicates=\"included\">\n                        <L7p:item dataType=\"included\">\n                            <L7p:Type variableDataType=\"boolean\"/>\n                        </L7p:item>\n                        <L7p:item binary=\"included\">\n                            <L7p:CaseSensitive booleanValue=\"false\"/>\n                            <L7p:RightValue stringValue=\"true\"/>\n                        </L7p:item>\n                    </L7p:Predicates>\n                </L7p:ComparisonAssertion>\n                <L7p:HardcodedResponse>\n                    <L7p:AssertionComment assertionComment=\"included\">\n                        <L7p:Properties mapValue=\"included\">\n                            <L7p:entry>\n                                <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                <L7p:value stringValue=\"204\"/>\n                            </L7p:entry>\n                        </L7p:Properties>\n                    </L7p:AssertionComment>\n                    <L7p:ResponseContentType stringValue=\"text/plain; charset=UTF-8\"/>\n                    <L7p:ResponseStatus stringValue=\"204\"/>\n                </L7p:HardcodedResponse>\n                <L7p:AddHeader>\n                    <L7p:AssertionComment assertionComment=\"included\">\n                        <L7p:Properties mapValue=\"included\">\n                            <L7p:entry>\n                                <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                                <L7p:value stringValue=\"Replace\"/>\n                            </L7p:entry>\n                            <L7p:entry>\n                                <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                                <L7p:value stringValue=\"// Override header to reflect actual allowed methods\"/>\n                            </L7p:entry>\n                        </L7p:Properties>\n                    </L7p:AssertionComment>\n                    <L7p:HeaderName stringValue=\"Access-Control-Allow-Methods\"/>\n                    <L7p:HeaderValue stringValue=\"GET\"/>\n                    <L7p:RemoveExisting booleanValue=\"true\"/>\n                    <L7p:Target target=\"RESPONSE\"/>\n                </L7p:AddHeader>\n                <L7p:assertionComment>\n                    <L7p:Properties mapValue=\"included\">\n                        <L7p:entry>\n                            <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                            <L7p:value stringValue=\"IsPreflight\"/>\n                        </L7p:entry>\n                    </L7p:Properties>\n                </L7p:assertionComment>\n            </wsp:All>\n            <L7p:assertionComment>\n                <L7p:Properties mapValue=\"included\">\n                    <L7p:entry>\n                        <L7p:key stringValue=\"LEFT.COMMENT\"/>\n                        <L7p:value stringValue=\"PreFlight\"/>\n                    </L7p:entry>\n                    <L7p:entry>\n                        <L7p:key stringValue=\"RIGHT.COMMENT\"/>\n                        <L7p:value stringValue=\"// Check for CORS-Pre-Flight\"/>\n                    </L7p:entry>\n                </L7p:Properties>\n            </L7p:assertionComment>\n        </wsp:OneOrMore>\n    </wsp:All>\n</wsp:Policy>"
  }
}